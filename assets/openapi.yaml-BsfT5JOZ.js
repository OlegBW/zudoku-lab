const t=Array.from({length:2},()=>({})),e={"#/components/schemas/Event":t[0],"#/components/schemas/Ticket":t[1]},n=Object.keys(e);Object.assign(t[0],{type:"object",properties:{id:{type:"string",description:"Unique identifier for the event"},name:{type:"string",description:"Name of the event"},description:{type:"string",description:"Description of the event"},date:{type:"string",format:"date-time",description:"Date and time of the event"},location:{type:"string",description:"Location of the event"}}});Object.defineProperty(t[0],"__$ref",{value:n[0],enumerable:!1});Object.assign(t[1],{type:"object",properties:{id:{type:"string",description:"Unique identifier for the ticket"},eventId:{type:"string",description:"The ID of the event the ticket belongs to"},price:{type:"number",format:"float",description:"Price of the ticket"},seat:{type:"string",description:"Seat number for the ticket (if applicable)"},status:{type:"string",enum:["available","sold"],description:"The status of the ticket (available or sold)"}}});Object.defineProperty(t[1],"__$ref",{value:n[1],enumerable:!1});const i={openapi:"3.1.1",info:{title:"Ticketing System API",description:"A simple API for managing events and tickets in a ticketing system.",version:"1.0.0"},servers:[{url:"http://localhost:8080/api"}],paths:{"/events":{get:{summary:"Get all events",responses:{200:{description:"A list of events",content:{"application/json":{schema:{type:"array",items:e["#/components/schemas/Event"]}}}}}},post:{summary:"Create a new event",requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/Event"]}}},responses:{201:{description:"Event created successfully",content:{"application/json":{schema:e["#/components/schemas/Event"]}}}}}},"/events/{eventId}":{get:{summary:"Get a specific event by ID",parameters:[{name:"eventId",in:"path",required:!0,description:"The ID of the event to retrieve",schema:{type:"string"}}],responses:{200:{description:"Event details",content:{"application/json":{schema:e["#/components/schemas/Event"]}}},404:{description:"Event not found"}}},put:{summary:"Update an existing event",parameters:[{name:"eventId",in:"path",required:!0,description:"The ID of the event to update",schema:{type:"string"}}],requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/Event"]}}},responses:{200:{description:"Event updated successfully",content:{"application/json":{schema:e["#/components/schemas/Event"]}}},404:{description:"Event not found"}}},delete:{summary:"Delete an event",parameters:[{name:"eventId",in:"path",required:!0,description:"The ID of the event to delete",schema:{type:"string"}}],responses:{204:{description:"Event deleted successfully"},404:{description:"Event not found"}}}},"/tickets":{get:{summary:"Get all tickets",responses:{200:{description:"A list of tickets",content:{"application/json":{schema:{type:"array",items:e["#/components/schemas/Ticket"]}}}}}},post:{summary:"Create a new ticket",requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/Ticket"]}}},responses:{201:{description:"Ticket created successfully",content:{"application/json":{schema:e["#/components/schemas/Ticket"]}}}}}},"/tickets/{ticketId}":{get:{summary:"Get a specific ticket by ID",parameters:[{name:"ticketId",in:"path",required:!0,description:"The ID of the ticket to retrieve",schema:{type:"string"}}],responses:{200:{description:"Ticket details",content:{"application/json":{schema:e["#/components/schemas/Ticket"]}}},404:{description:"Ticket not found"}}},put:{summary:"Update an existing ticket",parameters:[{name:"ticketId",in:"path",required:!0,description:"The ID of the ticket to update",schema:{type:"string"}}],requestBody:{required:!0,content:{"application/json":{schema:e["#/components/schemas/Ticket"]}}},responses:{200:{description:"Ticket updated successfully",content:{"application/json":{schema:e["#/components/schemas/Ticket"]}}},404:{description:"Ticket not found"}}},delete:{summary:"Delete a ticket",parameters:[{name:"ticketId",in:"path",required:!0,description:"The ID of the ticket to delete",schema:{type:"string"}}],responses:{204:{description:"Ticket deleted successfully"},404:{description:"Ticket not found"}}}}},components:{schemas:{Event:{type:"object",properties:{id:{type:"string",description:"Unique identifier for the event"},name:{type:"string",description:"Name of the event"},description:{type:"string",description:"Description of the event"},date:{type:"string",format:"date-time",description:"Date and time of the event"},location:{type:"string",description:"Location of the event"}}},Ticket:{type:"object",properties:{id:{type:"string",description:"Unique identifier for the ticket"},eventId:{type:"string",description:"The ID of the event the ticket belongs to"},price:{type:"number",format:"float",description:"Price of the ticket"},seat:{type:"string",description:"Seat number for the ticket (if applicable)"},status:{type:"string",enum:["available","sold"],description:"The status of the ticket (available or sold)"}}}}}},s={operations:{"/events-get-Get all events":"get-all-events","/events-post-Create a new event":"create-a-new-event","/events/{eventId}-get-Get a specific event by ID":"get-a-specific-event-by-id","/events/{eventId}-put-Update an existing event":"update-an-existing-event","/events/{eventId}-delete-Delete an event":"delete-an-event","/tickets-get-Get all tickets":"get-all-tickets","/tickets-post-Create a new ticket":"create-a-new-ticket","/tickets/{ticketId}-get-Get a specific ticket by ID":"get-a-specific-ticket-by-id","/tickets/{ticketId}-put-Update an existing ticket":"update-an-existing-ticket","/tickets/{ticketId}-delete-Delete a ticket":"delete-a-ticket"},tags:{}};export{i as schema,s as slugs};
//# sourceMappingURL=openapi.yaml-BsfT5JOZ.js.map
